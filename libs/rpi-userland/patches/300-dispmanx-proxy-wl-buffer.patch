diff --git a/interface/khronos/ext/egl_wayland.c b/interface/khronos/ext/egl_wayland.c
index 5730743..358a842 100644
--- a/interface/khronos/ext/egl_wayland.c
+++ b/interface/khronos/ext/egl_wayland.c
@@ -49,6 +49,13 @@ destroy_buffer(struct wl_resource *resource)
 }
 
 static void
+destroy_proxy_buffer(struct wl_resource *resource)
+{
+    struct wl_dispmanx_server_buffer *buffer = wl_resource_get_user_data(resource);
+    free(buffer);
+}
+
+static void
 buffer_destroy(struct wl_client *client, struct wl_resource *resource)
 {
    wl_resource_destroy(resource);
@@ -133,8 +140,51 @@ dispmanx_create_buffer(struct wl_client *client, struct wl_resource *resource,
                                      buffer->handle);
 }
 
+static void
+dispmanx_create_proxy_buffer(struct wl_client *client, struct wl_resource *resource,
+                             uint32_t id, uint32_t resource_handle,
+                             int32_t width, int32_t height, uint32_t format)
+{
+    struct wl_dispmanx_server_buffer *buffer;
+    VC_IMAGE_TYPE_T vc_format = get_vc_format(format);
+
+    if (vc_format == VC_IMAGE_MIN) {
+        wl_resource_post_error(resource, WL_DISPMANX_ERROR_INVALID_FORMAT, "invalid format");
+        return;
+    }
+
+    buffer = calloc(1, sizeof *buffer);
+    if (buffer == NULL) {
+        wl_resource_post_no_memory(resource);
+        return;
+    }
+
+    buffer->handle = resource_handle;
+    if (buffer->handle == DISPMANX_NO_HANDLE) {
+        wl_resource_post_error(resource, WL_DISPMANX_ERROR_ALLOC_FAILED, "proxy allocation failed");
+        free(buffer);
+        return;
+    }
+
+    buffer->width = width;
+    buffer->height = height;
+    buffer->format = format;
+
+    buffer->resource = wl_resource_create(resource->client, &wl_buffer_interface, 1, id);
+
+    if (!buffer->resource) {
+        wl_resource_post_no_memory(resource);
+        free(buffer);
+        return;
+    }
+
+    wl_resource_set_implementation(buffer->resource, (void (**)(void)) &dispmanx_buffer_interface,
+                                   buffer, destroy_proxy_buffer);
+}
+
 static const struct wl_dispmanx_interface dispmanx_interface = {
    dispmanx_create_buffer,
+   dispmanx_create_proxy_buffer,
 };
 
 static void
diff --git a/interface/vmcs_host/vc_dispmanx.h b/interface/vmcs_host/vc_dispmanx.h
index 319a9d6..c53cd05 100755
--- a/interface/vmcs_host/vc_dispmanx.h
+++ b/interface/vmcs_host/vc_dispmanx.h
@@ -140,6 +140,8 @@ VCHPRE_ int VCHPOST_ vc_dispmanx_resource_set_palette( DISPMANX_RESOURCE_HANDLE_
 #ifdef BUILD_WAYLAND
 VCHPRE_ DISPMANX_RESOURCE_HANDLE_T VCHPOST_ vc_dispmanx_get_handle_from_wl_buffer( struct wl_resource *_buffer );
 
+VCHPRE_ enum wl_dispmanx_format VCHPOST_ vc_dispmanx_get_format_from_wl_buffer( struct wl_resource *_buffer );
+
 VCHPRE_ void VCHPOST_ vc_dispmanx_set_wl_buffer_in_use( struct wl_resource *_buffer, int in_use );
 #endif
 #ifdef __cplusplus
diff --git a/interface/vmcs_host/vc_vchi_dispmanx.c b/interface/vmcs_host/vc_vchi_dispmanx.c
index 4656d2f..ff7a021 100644
--- a/interface/vmcs_host/vc_vchi_dispmanx.c
+++ b/interface/vmcs_host/vc_vchi_dispmanx.c
@@ -1254,6 +1254,15 @@ VCHPRE_ DISPMANX_RESOURCE_HANDLE_T VCHPOST_ vc_dispmanx_get_handle_from_wl_buffe
 	return buffer->handle;
 }
 
+VCHPRE_ enum wl_dispmanx_format VCHPOST_ vc_dispmanx_get_format_from_wl_buffer( struct wl_resource *_buffer)
+{
+    struct wl_dispmanx_server_buffer *buffer = (struct wl_dispmanx_server_buffer*)_buffer->data;
+    if (!buffer)
+        return WL_DISPMANX_FORMAT_RGB565;
+
+    return buffer->format;
+}
+
 /***********************************************************
  * Name: vc_dispmanx_set_wl_buffer_in_use
  *
diff --git a/interface/wayland/dispmanx.xml b/interface/wayland/dispmanx.xml
index c18626d..e7f5d68 100644
--- a/interface/wayland/dispmanx.xml
+++ b/interface/wayland/dispmanx.xml
@@ -114,6 +114,14 @@
       <arg name="format" type="uint"/>
     </request>
 
+    <request name="create_proxy_buffer">
+      <arg name="id" type="new_id" interface="wl_buffer"/>
+      <arg name="handle" type="uint"/>
+      <arg name="width" type="int"/>
+      <arg name="height" type="int"/>
+      <arg name="format" type="uint"/>
+    </request>
+
     <event name="buffer_allocated">
       <arg name="buffer" type="object" interface="wl_buffer"/>
       <arg name="handle" type="uint"/>
